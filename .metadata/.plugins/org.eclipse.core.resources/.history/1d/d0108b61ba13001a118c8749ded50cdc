import java.util.*;

public class Partie {
	private static Partie partie = null;
	private ArrayList<Joueur> joueurs;
	private int nbJoueur;
	private int nbJoueurVirtuel;
	private int tourDeJeu;// ne pas oublier de faire ++ à chaque fin de tour
	private Tas tas;
	private Pioche pioche;
	private StrategieA strategie;
	private Trophee trophee1;
	private Trophee trophee2;

	private Partie() {
		this.joueurs = new ArrayList<Joueur>();
		this.nbJoueur = 3;
		this.nbJoueurVirtuel = 1;
		this.tourDeJeu = 1;
		this.tas = new Tas();
		this.pioche = new Pioche();
		this.strategie=new StrategieA();
	}

	public static Partie getInstance() {
		if (partie == null) {
			partie = new Partie();
		}
		return partie;
	}

	public void addJoueur(Joueur joueur) {
		this.joueurs.add(joueur);
	}

	public ArrayList<Joueur> getJoueurs() {
		return this.joueurs;
	}

	public void configurerNbJoueur(Scanner sc) {
		System.out.println("\n Combien de joueurs souhaitez vous (entre 3 et 4)?\n ");

		String choix = "0";
		boolean valide = false;
		while (valide == false) {

			choix = sc.nextLine();

			switch (choix) {
			case "3":
				this.nbJoueur = 3;
				valide = true;
				break;
			case "4":
				this.nbJoueur = 4;
				valide = true;

				break;
			default:
				System.out.println("Vous avez tapé un mauvais nombre, veuillez recommencer");

			}
		}

	}

	public void configurerNbJoueurVirtuel(Scanner sc) {
		System.out.println("\n Combien de joueurs virtuels souhaitez vous (inférieur à " + this.nbJoueur + ")?");

		String choix = "0";
		boolean valide = false;
		while (valide == false) {

			choix = sc.nextLine();

			switch (choix) {
			case "0":
				this.nbJoueurVirtuel = 0;
				valide = true;
				break;
			case "1":
				this.nbJoueurVirtuel = 1;
				valide = true;
				break;
			case "2":
				this.nbJoueurVirtuel = 2;
				valide = true;
				break;
			case "3":
				if (this.nbJoueur == 4) {
					this.nbJoueurVirtuel = 3;
					valide = true;
					break;
				} else {
					System.out.println("Vous avez tapé un mauvais nombre, veuillez recommencer");

				}
			default:
				System.out.println("Vous avez tapé un mauvais nombre, veuillez recommencer");

			}
		}

	}

	public void configurerPartie(Scanner sc) {
		System.out.println("------Jeu De Jest------ \n");
		System.out.println("Que souhaitez vous faire? \n 1. Lancer une partie \n 2. Gérer les paramètres \n");
		String choix1 = "0";
		boolean valide = false;
		while (valide == false) {

			choix1 = sc.nextLine();

			switch (choix1) {
			case "1":
				valide = true;
				break;
			case "2":
				partie.configurerNbJoueur(sc);
				partie.configurerNbJoueurVirtuel(sc);
				valide = true;

				break;
			default:
				System.out.println("Vous avez tapé un mauvais nombre, veuillez recommencer");

			}
		}

	}

	public void initialisationPartie(Scanner sc) {// creer les joueurs avec leur pseudo, choisi les trophees de la
													// partie
		int i;
		String pseudo = "0";
		for (i = 0; i < (nbJoueur - nbJoueurVirtuel); i++) {
			System.out.println("Choisir un pseudo pour le joueur" + (i + 1));
			pseudo = sc.nextLine();
			new JoueurReel(pseudo, this);
		}
		while (i < nbJoueur) {
			new JoueurVirtuel(this);
			i++;
		}

		this.pioche.melanger();
		this.trophee1 = new Trophee(this.pioche.retirerCarteDuHaut());
		System.out.println(
				"Trophée 1: " + this.trophee1.getCarte() + " Condition: " + this.trophee1.getCarte().getCondition());
		if (nbJoueur == 3) {
			this.trophee2 = new Trophee(this.pioche.retirerCarteDuHaut());
			System.out.println("Trophée 2: " + this.trophee2.getCarte() + " Condition: "
					+ this.trophee2.getCarte().getCondition());
		}

	}

	public void creationDesOffres(Scanner sc) {// fait piocher les joueurs et leurs fait creer leurs offres
		for (Joueur j : joueurs) {
			if (partie.tourDeJeu == 1) {
				j.piocherDansPioche(partie.pioche);
				j.piocherDansPioche(partie.pioche);
			} else {
				j.piocherDansTas(partie.tas);
				j.piocherDansTas(partie.tas);
			}

		}
		for (Joueur j : joueurs) {
			if (j instanceof JoueurVirtuel) {
				j.faireOffre(partie.strategie);
			} else {
				
				System.out.println(j.getPseudo()
						+ ": Quel carte voulez vous rendre face cachée?\n 1.Première Carte \n 2.Deuxième Carte");
				String choix = "0";
				boolean valide = false;
				while (valide == false) {

					choix = sc.nextLine();

					switch (choix) {
					case "1":
						j.faireOffre(false);

						valide = true;
						break;
					case "2":
						j.faireOffre(true);
						valide = true;

						break;
					default:
						System.out.println("Vous avez tapé un mauvais nombre, veuillez recommencer");

					}
				}
			}
		}
	}

	public void affichageDesOffres() {
		for (Joueur j : joueurs) {
			System.out.println(j.getPseudo() + ":\n");
			j.getMain().afficherOffre();
		}
	}

	public void piochageDesOffres(Scanner sc) {// permet à tous les joueurs de piocher dans les offres adverses
		/*Iterator<Joueur> it1 = partie.joueurs.iterator();
		Iterator<Joueur> it2 = partie.joueurs.iterator();
		Joueur piocheur = partie.testMeilleureCarteVisible();
		JoueurVirtuel ia;
		Joueur joueurPioche;
		while (it1.hasNext()) {
			while (it2.next() != piocheur) {
			}
			if (it2.next() instanceof JoueurVirtuel) {
				ia = (JoueurVirtuel) it2.next();
				joueurPioche = ia.choisirJoueurAPiocher(partie.strategie, partie.joueurs);
				ia.piocherOffre(partie.strategie, joueurPioche);
				it2.next().setJest(ia.getJest());
				if (joueurPioche.getJouabilite()) {
					piocheur = joueurPioche;
				} else {
					piocheur = partie.testMeilleureCarteVisible();
				}

			} else {
				System.out.println("Chez quel joueur voulez vous piocher?\n");
				String choix = "0";
				boolean valide = false;
				Iterator<Joueur> it3 = partie.joueurs.iterator();
				while (valide == false) {
					choix = sc.nextLine();
					while (it3.hasNext()) {
						if (it3.next().getPseudo() == choix) {
							valide = true;
							System.out.println(
									"Quelle carte prenez vous? Tapez 1 pour celle visible et 2 pour celle cachée");
							String choix2 = "0";
							boolean valide2 = false;
							while (valide2 == false) {

								choix2 = sc.nextLine();

								switch (choix2) {
								case "1":
									it2.next().piocherOffre(it3.next(), true);
									if (it3.next().getJouabilite()) {
										piocheur = it3.next();
									} else {
										piocheur = partie.testMeilleureCarteVisible();
									}
									valide2 = true;
									break;
								case "2":
									it2.next().piocherOffre(it3.next(), false);
									if (it3.next().getJouabilite()) {
										piocheur = it3.next();
									} else {
										piocheur = partie.testMeilleureCarteVisible();
									}
									valide2 = true;

									break;
								default:
									System.out.println("Vous avez tapé un mauvais nombre, veuillez recommencer");

								}
							}

						}
					}
					if (valide == false) {
						System.out.println("Vous avez tapé un mauvais nombre, veuillez recommencer\"");
					}
				}

			}

		}

	}*/

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		Partie.getInstance();
		partie.configurerPartie(sc);
		partie.initialisationPartie(sc);

		 partie.creationDesOffres(sc);
		 partie.affichageDesOffres();

		sc.close();

	}

}
