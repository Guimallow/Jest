import java.util.ArrayList;
public class Arbitre implements Visiteur {
	public void visit(Jest j){

	}
	public void visit(Trophee t){

	}
	
	public int compterPoints(Jest jest){ //Le jest est une LinkedList --> int size: nb éléments, object get(index): objet à l'index
		int point = 0;
		Carte currentCart;
		int currentCartValue;
		for (int i = 0; i < jest.jest.size(); i++){
			currentCart = jest.jest.get(i);
			currentCartValue = currentCart.valeur.ordinal() + 1; //+1 parce que "l'index" de l'énum qu'on récupère avec ordinal() commence avec AS = 0 (c'est fixé par la définition d'une énum)
			point += currentCartValue;
		}
		return point;
	}
	
	//Pas moyen de renvoyer une liste ordonnée plutôt ?
	public ArrayList<Joueur> etablirClassement(ArrayList<Joueur> joueur){
		ArrayList<Joueur> classement;
		classement = new ArrayList<Joueur>();

		return classement;
	}
	
	public boolean checkJoker(Jest jest){
		boolean joker = false;
		for (int i = 0; i < jest.getJest().size(); i++){
			if (jest.getJest().get(i).valeur.ordinal() == 0){
				joker = true;
			}
		}
		return joker;
	}
	
	public void attribuerTrophee(ArrayList<Joueur> joueur, Trophee t1, Trophee t2){
		ConditionTrophee conditionT1;
		ConditionTrophee conditionT2;
		int nbJoueur = joueur.size();
		conditionT1 = t1.getCarte().condition;
		conditionT2 = t2.getCarte().condition;
		//On attribue les trophées simultanément donc on va stocker le jest auquel on attribue le premier trophée pour ne pas l'ajouter tout de suite au Jest et ainsi perturber l'attribution du second
		Jest jestTropheeT1 = null;
		Jest jestTropheeT2 = null;
		switch(conditionT1){
		case BestJest:
			for (int i=0; i<joueur.size(); i++){
				int points = 0;
				if (compterPoints(joueur.get(i).getJest()) > points){
					points = compterPoints(joueur.get(i).getJest());
					jestTropheeT1 = joueur.get(i).getJest();
				}
			System.out.println("Le trophee 1 a été attribué à " + jestTropheeT1.getJoueur().getPseudo());
			}
			break;
		case BestJestNoJoke: 
			for (int i=0; i<joueur.size(); i++){
				int points = 0;
				if ((compterPoints(joueur.get(i).getJest()) > points) || checkJoker(joueur.get(i).getJest()) == false){
					points = compterPoints(joueur.get(i).getJest());
					jestTropheeT1 = joueur.get(i).getJest();
				}
			System.out.println("Le trophee 1 a été attribué à " + jestTropheeT1.getJoueur().getPseudo());
			}
			break;
		case Highest: 
			break;
		case Lowest: 
			break;
		case Majority: 
			break;
		case Joker: 
			for (int i=0; i<joueur.size(); i++){
				if (checkJoker(joueur.get(i).getJest()) == true){
					jestTropheeT1 = joueur.get(i).getJest();
					break;
				}
			System.out.println("Le trophee 1 a été attribué à " + jestTropheeT1.getJoueur().getPseudo());
			}
			break;
		}
		
		switch(conditionT2){
		case BestJest:
			for (int i=0; i<joueur.size(); i++){
				int points = 0;
				if (compterPoints(joueur.get(i).getJest()) > points){
					points = compterPoints(joueur.get(i).getJest());
					jestTropheeT2 = joueur.get(i).getJest();
				}
			System.out.println("Le trophee 2 a été attribué à " + jestTropheeT2.getJoueur().getPseudo());
			}
			break;
		case BestJestNoJoke: 
			for (int i=0; i<joueur.size(); i++){
				int points = 0;
				if ((compterPoints(joueur.get(i).getJest()) > points) || checkJoker(joueur.get(i).getJest()) == false){
					points = compterPoints(joueur.get(i).getJest());
					jestTropheeT2 = joueur.get(i).getJest();
				}
			System.out.println("Le trophee 2 a été attribué à " + jestTropheeT2.getJoueur().getPseudo());
			}
			break;
		case Highest: 
			break;
		case Lowest: 
			break;
		case Majority: 
			break;
		case Joker: 
			for (int i=0; i<joueur.size(); i++){
				if (checkJoker(joueur.get(i).getJest()) == true){
					jestTropheeT2 = joueur.get(i).getJest();
					break;
				}
			System.out.println("Le trophee 2 a été attribué à " + jestTropheeT2.getJoueur().getPseudo());
			}
			break;
		}
		
	}
}
