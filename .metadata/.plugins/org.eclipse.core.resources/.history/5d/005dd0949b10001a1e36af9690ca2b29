import java.util.*;

public class Partie {
	private static Partie partie = null;
	private ArrayList<Joueur> joueurs;
	private int nbJoueur;
	private int nbJoueurVirtuel;
	//private Tas tas;
	//Private Pioche pioche;

	private Partie() {
		this.joueurs = new ArrayList<Joueur>();
		this.nbJoueur = 3;
		this.nbJoueurVirtuel = 1;
		//this.tas = new Tas();
		//this.pioche = new Pioche();
	}

	public static Partie getInstance() {
		if (partie == null) {
			partie = new Partie();
		}
		return partie;
	}

	public void addJoueur(Joueur joueur) {
		this.joueurs.add(joueur);
	}

	public ArrayList<Joueur> getJoueurs() {
		return this.joueurs;
	}

	public void configurerNbJoueur(Scanner sc) {
		System.out.println("\n Combien de joueurs souhaitez vous (entre 3 et 4)?\n ");

		String choix = "0";
		boolean valide = false;
		while (valide == false) {

			choix = sc.nextLine();

			switch (choix) {
			case "3":
				this.nbJoueur = 3;
				valide = true;
				break;
			case "4":
				this.nbJoueur = 4;
				valide = true;

				break;
			default:
				System.out.println("Vous avez tapé un mauvais nombre, veuillez recommencer");

			}
		}

	}

	public void configurerNbJoueurVirtuel(Scanner sc) {
		System.out.println("\n Combien de joueurs virtuels souhaitez vous (inférieur à " + this.nbJoueur + ")?");

		String choix = "0";
		boolean valide = false;
		while (valide == false) {

			choix = sc.nextLine();

			switch (choix) {
			case "0":
				this.nbJoueurVirtuel = 0;
				valide = true;
				break;
			case "1":
				this.nbJoueurVirtuel = 1;
				valide = true;
				break;
			case "2":
				this.nbJoueurVirtuel = 2;
				valide = true;
				break;
			case "3":
				if (this.nbJoueur == 4) {
					this.nbJoueurVirtuel = 3;
					valide = true;
					break;
				} else {
					System.out.println("Vous avez tapé un mauvais nombre, veuillez recommencer");

				}
			default:
				System.out.println("Vous avez tapé un mauvais nombre, veuillez recommencer");

			}
		}

		
	}

	public void configurerPartie(Scanner sc) {
		System.out.println("------Jeu De Jest------ \n");
		System.out.println("Que souhaitez vous faire? \n 1. Lancer une partie \n 2. Gérer les paramètres \n");
		String choix1 = "0";
		boolean valide = false;
		while (valide == false) {

			choix1 = sc.nextLine();

			switch (choix1) {
			case "1":
				valide = true;
				break;
			case "2":
				partie.configurerNbJoueur(sc);
				partie.configurerNbJoueurVirtuel(sc);
				valide = true;

				break;
			default:
				System.out.println("Vous avez tapé un mauvais nombre, veuillez recommencer");

			}
		}

	}

	public void initialisationPartie(Scanner sc) {// creer les joueurs avec leur pseudo, choisi les trophees de la partie
		int i;
		String pseudo = "0";
		for (i = 0; i < (nbJoueur - nbJoueurVirtuel); i++) {
			System.out.println("Choisir un pseudo pour le joueur" + (i + 1));
			pseudo = sc.nextLine();
			new JoueurReel(pseudo, this);
		}
		while (i < nbJoueur) {
			new JoueurVirtuel(this);
			i++;
		}
		/*this.pioche.melanger();
		this.trophee1 = new Trophee(this.pioche.retirerCarteDuHaut());
		if (nbJoueur == 3) {
			this.trophee2 = new Trophee(this.pioche.retirerCarteDuHaut());
		}*/
	}

	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		Partie.getInstance();
		partie.configurerPartie(sc);
		partie.initialisationPartie(sc);
		Iterator<Joueur> it = partie.joueurs.iterator();
		
		sc.close();
		
		Pioche pioche;
		Arbitre arbitre;
		Trophee trophee1;
		Trophee trophee2;
		ArrayList<Joueur> joueurs;
		LinkedList<Joueur> classementFinal;
		
		joueurs = partie.getJoueurs();
		arbitre = new Arbitre();
		pioche = new Pioche();
		pioche.melanger();
		trophee1 = new Trophee(pioche.retirerCarteDuHaut());
		trophee2 = new Trophee(pioche.retirerCarteDuHaut());
		
		/*Plan d'un tour de jeu: 
		 * Tant que pioche non vide(et que tout le monde peut piocher)
		 	* Chaque joueur: Pioche 2 cartes dans le tas + fait offre (dans l'ordre de meilleur jest)
		 	* Chaque joueur: Pioche dans offre d'un autre joueur si piochable + ajoute à son Jest
		 	* 	--> Joueur dont on vient de piocher la carte
		 	* 	--> Si dernier joueur: peut piocher dans sa propre offre
		 	* On remet les cartes restantes dans le tas à distribuer + on y ajoute autant de cartes de la ioche qu'il y a de joueurs
		 	* On distribue deux cartes du tas ainsi obtenu
		 * Quand pioche vide:
		 * Joueurs piochent carte restante dans leur Jest
		 * Attribution trophées
		 * Désignation du vainqueur
		 */
		while (pioche.geta0Carte() == false){
			
		}
		
		boolean carteRestante = false;
		//Quand pioche vide
		for (Joueur j : joueurs){
			//carteRestante correspond à la carte non piochée par un joueur adverse
			j.piocherOffre(j, carteRestante); //on va initialiser carteRestante tout au long des tours de jeu quand pioche != vide mais elle ne servira que pour cette partie
		}
		
		//Début de la définition des vainqueurs:
		arbitre.attribuerTrophee(joueurs, trophee1, trophee2);
		classementFinal = arbitre.etablirClassement(joueurs);
		
		System.out.println("Le gagnant est : " + classementFinal.get(1) + "\n Félicitations !");
		
	}

}
